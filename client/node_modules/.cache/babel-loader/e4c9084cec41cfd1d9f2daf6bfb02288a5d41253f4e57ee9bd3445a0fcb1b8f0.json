{"ast":null,"code":"var _jsxFileName = \"/Users/adamrathbun/Desktop/cinema-chef/client/src/components/Auth/Auth.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './Auth.scss'\n\n// // const AuthComponent = () => {\n// //   const [formData, setFormData] = useState({\n// //     username: '',\n// //     password: '',\n// //   });\n\n// //   const [user, setUser] = useState(null);\n// //   const [isRegister, setIsRegister] = useState(false);\n// //   const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n// //   const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n\n// //   useEffect(() => {\n// //     const storedToken = localStorage.getItem('authToken');\n\n// //     const logoutUser = () => {\n// //       setUser(null);\n// //       localStorage.removeItem('authToken');\n// //     };\n\n// //     if (storedToken) {\n// //       try {\n// //         const decodedToken = jwtDecode(storedToken);\n// //         const currentTime = Date.now() / 1000;\n\n// //         if (decodedToken.exp < currentTime) {\n// //           logoutUser();\n// //         } else {\n// //           setUser({ username: decodedToken.username });\n// //         }\n// //       } catch (error) {\n// //         console.error('Error decoding token:', error);\n// //         logoutUser();\n// //       }\n// //     }\n// //   }, []);\n\n// //   const handleAuth = async () => {\n// //     try {\n// //       const endpoint = isRegister\n// //         ? 'http://localhost:5000/auth/register'\n// //         : 'http://localhost:5000/auth/login';\n\n// //       const response = await axios.post(endpoint, formData);\n\n// //       setUser(response.data.user);\n\n// //       localStorage.setItem('authToken', response.data.token);\n\n// //       setFormData({\n// //         username: '',\n// //         password: '',\n// //       });\n\n// //       window.location.reload();\n// //     } catch (error) {\n// //       console.error(`Error during ${isRegister ? 'registration' : 'login'}:`, error);\n// //     }\n// //   };\n\n// //   const handleLogout = () => {\n// //     setUser(null);\n// //     localStorage.removeItem('authToken');\n\n// //     window.location.reload();\n// //   };\n\n// //   const toggleLoginFormVisibility = () => {\n// //     setIsRegisterFormVisible(false);\n// //     setIsLoginFormVisible(!isLoginFormVisible);\n// //   };\n\n// //   const toggleRegisterFormVisibility = () => {\n// //     setIsLoginFormVisible(false);\n// //     setIsRegisterFormVisible(!isRegisterFormVisible);\n// //   };\n// //   return (\n// //     <div className=\"auth-container\">\n// //       {user ? (\n// //         <div>\n// //           <p>Welcome, {user.username}!</p>\n// //           <button onClick={handleLogout}>Logout</button>\n// //         </div>\n// //       ) : (\n// //         <div className=\"auth-content\">\n// //           <div className=\"auth-options\">\n// //             <div onClick={toggleLoginFormVisibility}>Login</div>\n// //             <div onClick={toggleRegisterFormVisibility}>Need to register?</div>\n// //           </div>\n// //           {isLoginFormVisible && (\n// //             <div className=\"auth-form\">\n// //               <label>\n// //                 Username:\n// //                 <input\n// //                   type=\"text\"\n// //                   value={formData.username}\n// //                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n// //                 />\n// //               </label>\n// //               <label>\n// //                 Password:\n// //                 <input\n// //                   type=\"password\"\n// //                   value={formData.password}\n// //                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n// //                 />\n// //               </label>\n// //               <button onClick={handleAuth}>Login</button>\n// //             </div>\n// //           )}\n// //           {isRegisterFormVisible && (\n// //             <div className=\"auth-form\">\n// //               <label>\n// //                 Username:\n// //                 <input\n// //                   type=\"text\"\n// //                   value={formData.username}\n// //                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n// //                 />\n// //               </label>\n// //               <label>\n// //                 Password:\n// //                 <input\n// //                   type=\"password\"\n// //                   value={formData.password}\n// //                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n// //                 />\n// //               </label>\n// //               <button onClick={handleAuth}>Register</button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default AuthComponent;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { jwtDecode } from 'jwt-decode';\n// import './Auth.scss';\n\n// const AuthComponent = () => {\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     password: '',\n//   });\n//   const [user, setUser] = useState(null);\n//   const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n//   const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n//   const [message, setMessage] = useState('Login');\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem('authToken');\n\n//     const logoutUser = () => {\n//       setUser(null);\n//       localStorage.removeItem('authToken');\n//     };\n\n//     if (storedToken) {\n//       try {\n//         const decodedToken = jwtDecode(storedToken);\n//         const currentTime = Date.now() / 1000;\n\n//         if (decodedToken.exp < currentTime) {\n//           logoutUser();\n//         } else {\n//           setUser({ username: decodedToken.username });\n//         }\n//       } catch (error) {\n//         console.error('Error decoding token:', error);\n//         logoutUser();\n//       }\n//     }\n//   }, []);\n\n//   const handleAuth = async () => {\n//     try {\n//       const endpoint = isRegisterFormVisible\n//         ? 'http://localhost:5000/auth/register'\n//         : 'http://localhost:5000/auth/login';\n\n//       const response = await axios.post(endpoint, formData);\n//       setUser(response.data.user);\n\n//       localStorage.setItem('authToken', response.data.token);\n//       setFormData({ username: '', password: '' });\n//       window.location.reload();\n//     } catch (error) {\n//       console.error(`Error during ${isRegisterFormVisible ? 'registration' : 'login'}:`, error);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     setUser(null);\n//     localStorage.removeItem('authToken');\n//     window.location.reload();\n//   };\n\n//   const toggleLoginFormVisibility = () => {\n//     setIsRegisterFormVisible(false);\n//     setIsLoginFormVisible(!isLoginFormVisible);\n//     setMessage('Login');\n//   };\n\n//   const toggleRegisterFormVisibility = () => {\n//     setIsLoginFormVisible(false);\n//     setIsRegisterFormVisible(!isRegisterFormVisible);\n//     setMessage('Login');\n//   };\n\n//   return (\n//     <div className=\"auth-container\">\n//       {user ? (\n//         <div>\n//           <p>Welcome, {user.username}!</p>\n//           <button onClick={handleLogout}>Logout</button>\n//         </div>\n//       ) : (\n//         <div className=\"auth-content\">\n//           <div className=\"auth-options\">\n//             <div onClick={toggleLoginFormVisibility}>{message}</div>\n//           </div>\n//           {isLoginFormVisible && (\n//             <div className=\"auth-form\">\n//               <label>\n//                 Username:\n//                 <input\n//                   type=\"text\"\n//                   value={formData.username}\n//                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n//                 />\n//               </label>\n//               <label>\n//                 Password:\n//                 <input\n//                   type=\"password\"\n//                   value={formData.password}\n//                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                 />\n//               </label>\n//               <button onClick={handleAuth}>Login</button>\n//               <div onClick={toggleRegisterFormVisibility}>Need to register?</div>\n//             </div>\n//           )}\n//           {isRegisterFormVisible && (\n//             <div className=\"auth-form\">\n//               <label>\n//                 Username:\n//                 <input\n//                   type=\"text\"\n//                   value={formData.username}\n//                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n//                 />\n//               </label>\n//               <label>\n//                 Password:\n//                 <input\n//                   type=\"password\"\n//                   value={formData.password}\n//                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                 />\n//               </label>\n//               <button onClick={handleAuth}>Register</button>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AuthComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport './Auth.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthComponent = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const [user, setUser] = useState(null);\n  const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n  const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('authToken');\n    const logoutUser = () => {\n      setUser(null);\n      localStorage.removeItem('authToken');\n    };\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        const currentTime = Date.now() / 1000;\n        if (decodedToken.exp < currentTime) {\n          logoutUser();\n        } else {\n          setUser({\n            username: decodedToken.username\n          });\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        logoutUser();\n      }\n    }\n  }, []);\n  const handleAuth = async () => {\n    try {\n      const endpoint = isRegisterFormVisible ? 'http://localhost:5000/auth/register' : 'http://localhost:5000/auth/login';\n      const response = await axios.post(endpoint, formData);\n      setUser(response.data.user);\n      localStorage.setItem('authToken', response.data.token);\n      setFormData({\n        username: '',\n        password: ''\n      });\n      window.location.reload();\n    } catch (error) {\n      console.error(`Error during ${isRegisterFormVisible ? 'registration' : 'login'}:`, error);\n    }\n  };\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    window.location.reload();\n  };\n  const toggleLoginFormVisibility = () => {\n    setIsRegisterFormVisible(false);\n    setIsLoginFormVisible(!isLoginFormVisible);\n  };\n  const toggleRegisterFormVisibility = () => {\n    setIsLoginFormVisible(false);\n    setIsRegisterFormVisible(!isRegisterFormVisible);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", user.username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-content\",\n      children: [isLoginFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.username,\n            onChange: e => setFormData({\n              ...formData,\n              username: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: formData.password,\n            onChange: e => setFormData({\n              ...formData,\n              password: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAuth,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: toggleRegisterFormVisibility,\n          children: \"Need to register?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this), isRegisterFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.username,\n            onChange: e => setFormData({\n              ...formData,\n              username: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: formData.password,\n            onChange: e => setFormData({\n              ...formData,\n              password: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAuth,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }, this), !isLoginFormVisible && !isRegisterFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-options\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: toggleLoginFormVisibility,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthComponent, \"Hm5UPaFi9rd5t7mkvwHORPibEY8=\");\n_c = AuthComponent;\nexport default AuthComponent;\nvar _c;\n$RefreshReg$(_c, \"AuthComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","AuthComponent","_s","formData","setFormData","username","password","user","setUser","isLoginFormVisible","setIsLoginFormVisible","isRegisterFormVisible","setIsRegisterFormVisible","storedToken","localStorage","getItem","logoutUser","removeItem","decodedToken","currentTime","Date","now","exp","error","console","handleAuth","endpoint","response","post","data","setItem","token","window","location","reload","handleLogout","toggleLoginFormVisibility","toggleRegisterFormVisibility","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/adamrathbun/Desktop/cinema-chef/client/src/components/Auth/Auth.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { jwtDecode } from 'jwt-decode';\n// // import './Auth.scss'\n\n\n// // const AuthComponent = () => {\n// //   const [formData, setFormData] = useState({\n// //     username: '',\n// //     password: '',\n// //   });\n\n// //   const [user, setUser] = useState(null);\n// //   const [isRegister, setIsRegister] = useState(false);\n// //   const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n// //   const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n\n// //   useEffect(() => {\n// //     const storedToken = localStorage.getItem('authToken');\n\n// //     const logoutUser = () => {\n// //       setUser(null);\n// //       localStorage.removeItem('authToken');\n// //     };\n\n// //     if (storedToken) {\n// //       try {\n// //         const decodedToken = jwtDecode(storedToken);\n// //         const currentTime = Date.now() / 1000;\n\n// //         if (decodedToken.exp < currentTime) {\n// //           logoutUser();\n// //         } else {\n// //           setUser({ username: decodedToken.username });\n// //         }\n// //       } catch (error) {\n// //         console.error('Error decoding token:', error);\n// //         logoutUser();\n// //       }\n// //     }\n// //   }, []);\n\n// //   const handleAuth = async () => {\n// //     try {\n// //       const endpoint = isRegister\n// //         ? 'http://localhost:5000/auth/register'\n// //         : 'http://localhost:5000/auth/login';\n\n// //       const response = await axios.post(endpoint, formData);\n\n// //       setUser(response.data.user);\n\n// //       localStorage.setItem('authToken', response.data.token);\n\n// //       setFormData({\n// //         username: '',\n// //         password: '',\n// //       });\n\n// //       window.location.reload();\n// //     } catch (error) {\n// //       console.error(`Error during ${isRegister ? 'registration' : 'login'}:`, error);\n// //     }\n// //   };\n\n// //   const handleLogout = () => {\n// //     setUser(null);\n// //     localStorage.removeItem('authToken');\n\n// //     window.location.reload();\n// //   };\n\n// //   const toggleLoginFormVisibility = () => {\n// //     setIsRegisterFormVisible(false);\n// //     setIsLoginFormVisible(!isLoginFormVisible);\n// //   };\n\n// //   const toggleRegisterFormVisibility = () => {\n// //     setIsLoginFormVisible(false);\n// //     setIsRegisterFormVisible(!isRegisterFormVisible);\n// //   };\n// //   return (\n// //     <div className=\"auth-container\">\n// //       {user ? (\n// //         <div>\n// //           <p>Welcome, {user.username}!</p>\n// //           <button onClick={handleLogout}>Logout</button>\n// //         </div>\n// //       ) : (\n// //         <div className=\"auth-content\">\n// //           <div className=\"auth-options\">\n// //             <div onClick={toggleLoginFormVisibility}>Login</div>\n// //             <div onClick={toggleRegisterFormVisibility}>Need to register?</div>\n// //           </div>\n// //           {isLoginFormVisible && (\n// //             <div className=\"auth-form\">\n// //               <label>\n// //                 Username:\n// //                 <input\n// //                   type=\"text\"\n// //                   value={formData.username}\n// //                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n// //                 />\n// //               </label>\n// //               <label>\n// //                 Password:\n// //                 <input\n// //                   type=\"password\"\n// //                   value={formData.password}\n// //                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n// //                 />\n// //               </label>\n// //               <button onClick={handleAuth}>Login</button>\n// //             </div>\n// //           )}\n// //           {isRegisterFormVisible && (\n// //             <div className=\"auth-form\">\n// //               <label>\n// //                 Username:\n// //                 <input\n// //                   type=\"text\"\n// //                   value={formData.username}\n// //                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n// //                 />\n// //               </label>\n// //               <label>\n// //                 Password:\n// //                 <input\n// //                   type=\"password\"\n// //                   value={formData.password}\n// //                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n// //                 />\n// //               </label>\n// //               <button onClick={handleAuth}>Register</button>\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default AuthComponent;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { jwtDecode } from 'jwt-decode';\n// import './Auth.scss';\n\n// const AuthComponent = () => {\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     password: '',\n//   });\n//   const [user, setUser] = useState(null);\n//   const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n//   const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n//   const [message, setMessage] = useState('Login');\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem('authToken');\n\n//     const logoutUser = () => {\n//       setUser(null);\n//       localStorage.removeItem('authToken');\n//     };\n\n//     if (storedToken) {\n//       try {\n//         const decodedToken = jwtDecode(storedToken);\n//         const currentTime = Date.now() / 1000;\n\n//         if (decodedToken.exp < currentTime) {\n//           logoutUser();\n//         } else {\n//           setUser({ username: decodedToken.username });\n//         }\n//       } catch (error) {\n//         console.error('Error decoding token:', error);\n//         logoutUser();\n//       }\n//     }\n//   }, []);\n\n//   const handleAuth = async () => {\n//     try {\n//       const endpoint = isRegisterFormVisible\n//         ? 'http://localhost:5000/auth/register'\n//         : 'http://localhost:5000/auth/login';\n\n//       const response = await axios.post(endpoint, formData);\n//       setUser(response.data.user);\n\n//       localStorage.setItem('authToken', response.data.token);\n//       setFormData({ username: '', password: '' });\n//       window.location.reload();\n//     } catch (error) {\n//       console.error(`Error during ${isRegisterFormVisible ? 'registration' : 'login'}:`, error);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     setUser(null);\n//     localStorage.removeItem('authToken');\n//     window.location.reload();\n//   };\n\n//   const toggleLoginFormVisibility = () => {\n//     setIsRegisterFormVisible(false);\n//     setIsLoginFormVisible(!isLoginFormVisible);\n//     setMessage('Login');\n//   };\n\n//   const toggleRegisterFormVisibility = () => {\n//     setIsLoginFormVisible(false);\n//     setIsRegisterFormVisible(!isRegisterFormVisible);\n//     setMessage('Login');\n//   };\n\n//   return (\n//     <div className=\"auth-container\">\n//       {user ? (\n//         <div>\n//           <p>Welcome, {user.username}!</p>\n//           <button onClick={handleLogout}>Logout</button>\n//         </div>\n//       ) : (\n//         <div className=\"auth-content\">\n//           <div className=\"auth-options\">\n//             <div onClick={toggleLoginFormVisibility}>{message}</div>\n//           </div>\n//           {isLoginFormVisible && (\n//             <div className=\"auth-form\">\n//               <label>\n//                 Username:\n//                 <input\n//                   type=\"text\"\n//                   value={formData.username}\n//                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n//                 />\n//               </label>\n//               <label>\n//                 Password:\n//                 <input\n//                   type=\"password\"\n//                   value={formData.password}\n//                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                 />\n//               </label>\n//               <button onClick={handleAuth}>Login</button>\n//               <div onClick={toggleRegisterFormVisibility}>Need to register?</div>\n//             </div>\n//           )}\n//           {isRegisterFormVisible && (\n//             <div className=\"auth-form\">\n//               <label>\n//                 Username:\n//                 <input\n//                   type=\"text\"\n//                   value={formData.username}\n//                   onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n//                 />\n//               </label>\n//               <label>\n//                 Password:\n//                 <input\n//                   type=\"password\"\n//                   value={formData.password}\n//                   onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                 />\n//               </label>\n//               <button onClick={handleAuth}>Register</button>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AuthComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport './Auth.scss';\n\nconst AuthComponent = () => {\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  });\n  const [user, setUser] = useState(null);\n  const [isLoginFormVisible, setIsLoginFormVisible] = useState(false);\n  const [isRegisterFormVisible, setIsRegisterFormVisible] = useState(false);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem('authToken');\n\n    const logoutUser = () => {\n      setUser(null);\n      localStorage.removeItem('authToken');\n    };\n\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        const currentTime = Date.now() / 1000;\n\n        if (decodedToken.exp < currentTime) {\n          logoutUser();\n        } else {\n          setUser({ username: decodedToken.username });\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        logoutUser();\n      }\n    }\n  }, []);\n\n  const handleAuth = async () => {\n    try {\n      const endpoint = isRegisterFormVisible\n        ? 'http://localhost:5000/auth/register'\n        : 'http://localhost:5000/auth/login';\n\n      const response = await axios.post(endpoint, formData);\n      setUser(response.data.user);\n\n      localStorage.setItem('authToken', response.data.token);\n      setFormData({ username: '', password: '' });\n      window.location.reload();\n    } catch (error) {\n      console.error(`Error during ${isRegisterFormVisible ? 'registration' : 'login'}:`, error);\n    }\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    window.location.reload();\n  };\n\n  const toggleLoginFormVisibility = () => {\n    setIsRegisterFormVisible(false);\n    setIsLoginFormVisible(!isLoginFormVisible);\n  };\n\n  const toggleRegisterFormVisibility = () => {\n    setIsLoginFormVisible(false);\n    setIsRegisterFormVisible(!isRegisterFormVisible);\n  };\n\n  return (\n    <div className=\"auth-container\">\n      {user ? (\n        <div>\n          <p>Welcome, {user.username}!</p>\n          <button onClick={handleLogout}>Logout</button>\n        </div>\n      ) : (\n        <div className=\"auth-content\">\n          {isLoginFormVisible && (\n            <div className=\"auth-form\">\n              <label>\n                Username:\n                <input\n                  type=\"text\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                />\n              </label>\n              <label>\n                Password:\n                <input\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                />\n              </label>\n              <button onClick={handleAuth}>Login</button>\n              <div onClick={toggleRegisterFormVisibility}>Need to register?</div>\n            </div>\n          )}\n          {isRegisterFormVisible && (\n            <div className=\"auth-form\">\n              <label>\n                Username:\n                <input\n                  type=\"text\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                />\n              </label>\n              <label>\n                Password:\n                <input\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                />\n              </label>\n              <button onClick={handleAuth}>Register</button>\n            </div>\n          )}\n          {!isLoginFormVisible && !isRegisterFormVisible && (\n            <div className=\"auth-options\">\n              <div onClick={toggleLoginFormVisibility}>Login</div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AuthComponent;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}